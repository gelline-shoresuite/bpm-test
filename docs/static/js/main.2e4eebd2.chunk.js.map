{"version":3,"sources":["sounds/click1.wav","sounds/click2.wav","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleBpmChange","event","state","playing","clearInterval","timer","setInterval","playClick","bpm","setState","target","value","count","startStop","_this$state","beatsPerMeasure","click2","play","click1","Audio","_this$state2","react_default","a","createElement","className","type","min","max","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6QCkGzBC,cA3Fb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaFI,gBAAiB,SAACC,GACbR,EAAKS,MAAMC,SACZC,cAAcX,EAAKY,OACnBZ,EAAKY,MAAQC,YACXb,EAAKc,UACJ,GAAKd,EAAKS,MAAMM,IAAO,KAG1Bf,EAAKgB,SAAS,CACZD,IAAMP,EAAMS,OAAOC,MACnBC,MAAO,KAGTnB,EAAKgB,SAAS,CAACD,IAAKP,EAAMS,OAAOC,SA3BxBlB,EAiCboB,UAAY,WAEPpB,EAAKS,MAAMC,SACZC,cAAcX,EAAKY,OACnBZ,EAAKgB,SAAS,CACZN,SAAS,MAGXV,EAAKY,MAAQC,YACXb,EAAKc,UACJ,GAAKd,EAAKS,MAAMM,IAAO,KAE1Bf,EAAKgB,SAAS,CACZG,MAAO,EACPT,SAAS,GAERV,EAAKc,aAjDCd,EAsDbc,UAAY,WAAK,IAAAO,EACkBrB,EAAKS,MAA/BU,EADQE,EACRF,MAAOG,EADCD,EACDC,gBAEXH,EAAQG,IAAoB,EAC7BtB,EAAKuB,OAAOC,OAEZxB,EAAKyB,OAAOD,OAGdxB,EAAKgB,SAAS,iBAAM,CAClBG,OAAQA,EAAQ,GAAKG,MA7DvBtB,EAAKS,MAAM,CACTC,SAAS,EACTK,IAAK,IACLI,MAAO,EACPG,gBAAiB,GAGnBtB,EAAKyB,OAAS,IAAIC,MAAMD,KACxBzB,EAAKuB,OAAS,IAAIG,MAAMH,KAXbvB,wEAqEJ,IAAA2B,EACgBxB,KAAKM,MAArBC,EADAiB,EACAjB,QAASK,EADTY,EACSZ,IAChB,OACEa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,WACGf,EADH,QAGAa,EAAAC,EAAAC,cAAA,SACEE,KAAK,QACLC,IAAI,KACJC,IAAI,MACJhB,MAAOH,EACPoB,SAAUhC,KAAKI,mBAGnBqB,EAAAC,EAAAC,cAAA,UAAQM,QAASjC,KAAKiB,WAAYV,EAAS,OAAQ,iBAtFzC2B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAAeC,SAASC,eAAe,SD2HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2e4eebd2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React, { Component } from 'react';\nimport './App.css';\n\nimport click1 from './sounds/click1.wav';\nimport click2 from './sounds/click2.wav';\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state={\n      playing: false,\n      bpm: 100,\n      count: 0,\n      beatsPerMeasure: 4,\n    }\n\n    this.click1 = new Audio(click1);\n    this.click2 = new Audio(click2);\n  }\n\n  handleBpmChange =(event) =>{\n    if(this.state.playing){\n      clearInterval(this.timer);\n      this.timer = setInterval(\n        this.playClick, \n        (60 / this.state.bpm) * 1000\n      );\n\n      this.setState({\n        bpm : event.target.value,\n        count: 0,\n      });\n    }else{\n      this.setState({bpm: event.target.value});\n    }\n\n\n  }\n\n  startStop = () =>{\n\n    if(this.state.playing){\n      clearInterval(this.timer);\n      this.setState({\n        playing: false,\n      });\n    }else{\n      this.timer = setInterval(\n        this.playClick,\n        (60 / this.state.bpm) * 1000\n      );\n      this.setState({\n        count: 0,\n        playing: true,\n\n      }, this.playClick);\n    }\n\n  }\n\n  playClick = () =>{\n    const {count, beatsPerMeasure} = this.state;\n\n    if(count % beatsPerMeasure === 0){\n      this.click2.play();\n    }else{\n      this.click1.play();\n    }\n\n    this.setState(() =>({\n      count: (count + 1) % beatsPerMeasure,\n    }));\n    \n  }\n\n  render() {\n    const {playing, bpm} = this.state;\n    return (\n      <div className=\"metronome\">\n        <div className=\"bpm-slider\">\n          <div>\n            {bpm} BPM\n          </div>\n          <input \n            type=\"range\" \n            min=\"60\" \n            max=\"240\" \n            value={bpm} \n            onChange={this.handleBpmChange}\n          />\n        </div>\n        <button onClick={this.startStop}>{playing? 'Stop': 'Start'}</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Metronome from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Metronome />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}